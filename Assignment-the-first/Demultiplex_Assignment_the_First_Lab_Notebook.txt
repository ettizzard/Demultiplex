1) Entered interactive session for initial data exploration
    
    $ srun -A bgmp -p bgmp -c2 --pty bash

    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R1_001.fastq.gz | head -4
        @K00337:83:HJKJNBBXX:8:1101:1265:1191 1:N:0:1
        GNCTGGCATTCCCAGAGACATCAGTACCCAGTTGGTTCAGACAGTTCCTCTATTGGTTGACAAGGTCTTCATTTCTAGTGATATCAACACGGTGTCTACAA
        +
        A#A-<FJJJ<JJJJJJJJJJJJJJJJJFJJJJFFJJFJJJAJJJJ-AJJJJJJJFFJJJJJJFFA-7<AJJJFFAJJJJJF<F--JJJJJJF-A-F7JJJJ

    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R4_001.fastq.gz | head -4
        @K00337:83:HJKJNBBXX:8:1101:1265:1191 4:N:0:1
        NTTTTGATTTACCTTTCAGCCAATGAGAAGGCCGTTCATGCAGACTTTTTTAATGATTTTGAAGACCTTTTTGATGATGATGATGTCCAGTGAGGCCTCCC
        +
        #AAFAFJJ-----F---7-<FA-F<AFFA-JJJ77<FJFJFJJJJJJJJJJAFJFFAJJJJJJJJFJF7-AFFJJ7F7JFJJFJ7FFF--A<A7<-A-7--

    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R2_001.fastq.gz | head -4
        @K00337:83:HJKJNBBXX:8:1101:1265:1191 2:N:0:1
        NCTTCGAC
        +
        #AA<FJJJ

    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R3_001.fastq.gz | head -4
        @K00337:83:HJKJNBBXX:8:1101:1265:1191 3:N:0:1
        NTCGAAGA
        +
        #AAAAJJF
    
    From this, we know that biological sequence lines are of length 101 and index sequences are of length 8.

2) Wrote script "perbaseseqsdistribution.py" to plot per-base distribution of quality scores
###START OF SCRIPT###
#!/usr/bin/env python

import bioinfo
import matplotlib.pyplot as plt
import gzip
import argparse

def get_args():
    parser = argparse.ArgumentParser(description="Setting up fastq and read length arguments")
    parser.add_argument("-f", help="input fastq file", type=str)
    parser.add_argument("-l", help="sequence length", type=int)
    parser.add_argument("-r", help="read label", type=str)
    return parser.parse_args()
args = get_args()

read = []

for i in range(args.l):
    read.append(0.0)

with gzip.open(args.f, "rt") as fq:
    for line_num, line in enumerate(fq):
        line = line.strip()
        if line_num % 4 == 3:
            for base_pos, base in enumerate(line):
                read[base_pos] += bioinfo.convert_phred(base)
                
#calculate and print mean value at each base position
for index, value in enumerate(read):
    read[index] = value / ((line_num + 1) / 4)
    print(f"{index} {read[index]}")

filename = args.f.split("/")[-1].split(".")[0]

plt.title("Read"+args.r+" Per Base Average Quality Score Distribution")
plt.scatter(range(args.l), read)
plt.xlabel("Base Position")
plt.ylabel("Quality Score")
plt.savefig(filename+"_distributionplot.png")
###EOF###

3) Wrote 4 separate sbatch scripts so I could run them simultaneously. Each script is identical save for the corresponding read number and file name.
###START OF SCRIPT###
#!/bin/bash

#SBATCH --partition=bgmp        ### Partition (like a queue in PBS)
#SBATCH --job-name=r1plot     ### Job Name
#SBATCH --output=r1plot.out        ### File in which to store job output
#SBATCH --error=r1plot.err          ### File in which to store job error messages
#SBATCH --time=0-08:00:00       ### Wall clock time limit in Days-HH:MM:SS
#SBATCH --nodes=1               ### Number of nodes needed for the job
#SBATCH --cpus-per-task=8
#SBATCH --account=bgmp      ### Account used for job submission
#SBATCH --mail-type=ALL
#SBATCH --mail-user=tizzard@uoregon.edu
 
set -e

/usr/bin/time -v ./perbaseqsdistributions.py -f /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R1_001.fastq.gz -l 101 -r 1
###EOF###

5) Determined how many indices have undetermined base calls.
    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R2_001.fastq.gz | awk 'NR % 4 == 2' | grep "N" | wc -l
        3976613
    
    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R3_001.fastq.gz | awk 'NR % 4 == 2' | grep "N" | wc -l
        3328051
    
    $ zcat /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R2_001.fastq.gz /projects/bgmp/shared/2017_sequencing/1294_S1_L008_R3_001.fastq.gz | awk 'NR % 4 == 2' | grep "N" | wc -l
        7304664
    


6) Made unit tests:
    #First record is high quality dual matched
    #Second record is low quality (contains N)
    #Third record contains unknown index
    #Fourth record exhibits index hopping

7) Fixed up pseudocode:
###START OF PSEUDOCODE###
#Initialization
    #Shebang

    #Import necessary modules

    #Create a variable to hold count of number of pairs of properly matched indices, another to hold count of index-hopped pairs, and a third variable to hold count of pairs with low quality/unknown indices. All 3 of these variables will be initially set to 0.

    #Create a set to contain our 24 index sequences.
        #To accomplish this, open the index file from Talapas and iterate over to add each index to set.
    
    #Create a dictionary to contain tuples of index pairs as keys and tuples of file names as values.
        #Format for dual-matched pairs: keys = ("index1", "index2"); values =  ("R1_dualmatched_{index1}-{index2}.fq", "R2_dualmatched_{index1}-{index2}.fq")
        #Format for index-hopped pairs: keys = ("index1", "index2"); values =  ("R1_indexhopped.fq", "R2_indexhopped.fq")
        #Format for pairs with unknown/low-quality indices: keys = ("index1", "index2"); values =  ("R1_lowqual_unknown.fq", "R2_lowqual_unknown.fq")

    #Create another dictionary to keep count of occurrences of index pairs. Dictionary keys will be a tuple of the index sequences, and values will be the number of occurrences of the index pair.
        #Before our main body of code, we can initialize the 24 dual-matched index pairs as keys in this dictionary with values set to 0. As we continue in the algorithm, we will add unmatched high-quality index pairs to this dictionary as they are encountered.

#Main Body
    #Start by opening our 4 original fastq files at once.
    
    #Iterate over all 4 fastq files 1 record at a time (4 lines).
    
    #Per record, take each record line per file and save as corresponding variable.
    
    #Take the read3 index sequence, and create its reverse compliment, updating the variable with this string.
    
    #Append the read1 and read4 header lines with the index1 and index2 (read 2 and read3 reverse compliment).

    #Now that we have our record in the proper format, we can sort the reads.
        #First check to see if indices are within known list. If not, sort reads to unknown/low quality fastq files and increment unknown/low quality counter
        #Convert quality score lines of read1 and read4. Calculate average qs of entire read for both. If Average is below cutoff, also sort to unknown/low quality fastq files and increment unknown/low quality counter.
        
        #Elif:
            #Check that indices match. If they don't, add read1 and read4 records with appended headers to index-hopped fastq file pair and incrememnt index-hopped counter.
                #Check if this index pair already exists within the index pair freq dictionary. If it does, increment the corresponding value. Otherwise, add the pair and set its value to 1.

        #Elif:
            #This statement should encompass our high quality dual-matched index reads.
            #Increment matched index counter and the corresponding value in the index pair freq dictionary.
            #Add record to corresponding index in the first index pair-filename dictionary.

#Outputs
    #Print index pair-filename dictionary entries into corresponding files.
    #Print counts.
    #Close all files left open.
###EOF###

8) Wrote high-level functions
###START OF HIGHLEVELFXNS.TXT###
def reverse_compliment(seq: str) -> str:
    '''Takes a nucleotide sequence and returns its reverse compliment. If sequence contains N, reverse comlimentary base will also be N.'''
    return seq_rc
Input: ATCGTAT
Expected output: ATACGAT

def print_outputs(dual_matched_count: int, index_hopped_count: int, low_qual_unknown_count: int, paired_index_dict: dict, outputfilename: str) -> str:
    '''Takes counts of index pair types as well as the dictionary containing index pairs and filename conventions, then returns corresponding str to be written to file.'''
    return fileoutput
Input: above variables and dictionary
Expected output: properly formatted tab-separated summary of results to be written to file

def print_sorted_pairs(read1_header: str, read1_seq: str, read1_qscoreline: str, read1_filename: str, read4_header: str, read4_seq: str, read4_qscoreline: str, read4_filename: str) -> str:
    '''Rewrites each line of read1 and read4 records to sorted fastq file pairs based on index.
Input: above variables
Expected output: string of lines formatted in the fastq file convention
###EOF###